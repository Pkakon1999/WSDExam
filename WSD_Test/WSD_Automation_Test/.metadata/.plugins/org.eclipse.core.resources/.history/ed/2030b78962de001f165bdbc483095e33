package TestCases;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import io.github.bonigarcia.wdm.WebDriverManager;

import java.time.Duration;

public class cartTest {
	WebDriver driver;
	WebDriverWait wait;

	@BeforeTest
	public void setup() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://magento.softwaretestingboard.com");
		wait = new WebDriverWait(driver, Duration.ofSeconds(10)); // Explicit wait
	}

	@Test
	public void testAddToCart() {
		// Wait for search box and search for the product
		WebElement searchBox = wait.until(ExpectedConditions.elementToBeClickable(By.id("search")));
		searchBox.sendKeys("Orestes Fitness Short");
		searchBox.submit();

		// Wait for product result to appear
		WebElement productContainer = wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.xpath("//a[contains(text(),'Orestes Fitness Short')]")));

		// Scroll into view and hover
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block: 'center'});", productContainer);
		Actions actions = new Actions(driver);
		actions.moveToElement(productContainer).perform();

		// Click product to go to details page
		productContainer.click();

		// Wait for size & color options, then select them
		wait.until(ExpectedConditions.elementToBeClickable(By.id("option-label-size-143-item-176"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.id("option-label-color-93-item-50"))).click();

		// Capture product price
		WebElement priceElement = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("span.price")));
		String productPrice = priceElement.getText().trim();
		System.out.println("Product Price before adding to cart: " + productPrice);

		// Click Add to Cart
		wait.until(ExpectedConditions.elementToBeClickable(By.id("product-addtocart-button"))).click();

		// Wait for the cart link to appear and click it
		WebElement cartLink = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//a[contains(text(),'shopping cart')]")));
		cartLink.click();

		// Scroll into view
		((JavascriptExecutor) driver).executeScript("window.scrollBy(0,300);");

		// Verify product is in cart
		WebElement cartItem = wait.until(ExpectedConditions.visibilityOfElementLocated(
				By.xpath("//a[contains(text(),'Orestes Fitness Short')]")));
		Assert.assertTrue(cartItem.isDisplayed(), "Product not found in cart!");

		// Verify quantity
		WebElement qtyElement = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("input.input-text.qty")));
		String actualQuantity = qtyElement.getAttribute("value");
		System.out.println("Product Quantity in Cart: " + actualQuantity);
		Assert.assertEquals(actualQuantity, "1", "Quantity does not match!");

		// Verify price in cart
		WebElement cartPriceElement = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".cart-price .price")));
		String cartPrice = cartPriceElement.getText().trim();
		System.out.println("Product Price in Cart: " + cartPrice);
		Assert.assertEquals(cartPrice, productPrice, "Price mismatch between product page and cart!");
	}

	@AfterTest
	public void teardown() {
		driver.quit();
	}
}
